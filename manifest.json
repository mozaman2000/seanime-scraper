{
  "id": "moaaz-torrent-scraper",
  "name": "MTS",
  "description": "this extension scrapes entertainment torrent content from various sites",
  "version": "1.0.0",
  "language": "typescript",
  "type": "anime-torrent-provider",
  "author": "moaaz",
  "payload": "declare const registerProvider:(p:any)=>void;class Provider{private sources=[{url:"https://nyaa.si/?page=rss&c=1_2&q=",isNyaa:true},{url:"https://apibay.org/q.php?q=",isNyaa:false}];async search(o:AnimeSearchOptions):Promise<AnimeTorrent[]> {const t:AnimeTorrent[]=[];const q=o.media?.englishTitle||o.query;for(const s of this.sources){try{const r=await this.fetchTorrents(s.url,q,s.isNyaa);t.push(...r);}catch(e){console.error(`Failed to fetch from ${s.url}:`,e);}}return t;}async fetchTorrents(t:string,q:string,n:boolean):Promise<AnimeTorrent[]>{const a=n?`${q} -batch`:q;const u=`${t}${encodeURIComponent(a)}`;const r=await fetch(u);if(!r.ok)throw new Error(`Error fetching torrents: ${r.statusText}`);if(t.includes("apibay.org")){const j=await r.json();return this.parsePirateBayJson(j,q);}const x=await r.text();return this.parseXML(x,q);}private parseXML(x:string,q:string):AnimeTorrent[]{const t:AnimeTorrent[]=[];const i=/<item>([\s\S]*?)<\/item>/g;let m;while((m=i.exec(x))!==null){const i=m[1];const l=this.getTagContent(i,"title");if(!this.isTitleRelevant(l,q))continue;const n=this.getTagContent(i,"link"),c=this.getNyaaTagContent(i,"infoHash"),s=this.getNyaaTagContent(i,"size"),d=parseInt(this.getNyaaTagContent(i,"seeders"))||0,e=parseInt(this.getNyaaTagContent(i,"leechers"))||0;t.push({name:l,downloadUrl:n,magnetLink:`magnet:?xt=urn:btih:${c}`,infoHash:c,size:this.convertSizeToBytes(s),formattedSize:s,seeders:d,leechers:e,downloadCount:0,resolution:"",isBatch:l.toLowerCase().includes("batch"),isBestRelease:false,confirmed:false});}return t;}private isTitleRelevant(t:string,q:string):boolean{return t.toLowerCase().replace(/[^a-z0-9]/g,"").includes(q.toLowerCase().replace(/[^a-z0-9]/g,""));}private parsePirateBayJson(j:any[],q:string):AnimeTorrent[]{return j.filter(t=>t.name.toLowerCase().includes(q.toLowerCase())).map(t=>({name:t.name,downloadUrl:`https://pirateproxy.live/torrent/${t.id}`,magnetLink:`magnet:?xt=urn:btih:${t.info_hash}`,infoHash:t.info_hash,size:parseInt(t.size),formattedSize:`${(parseInt(t.size)/(1024*1024)).toFixed(2)} MB`,seeders:parseInt(t.seeders),leechers:parseInt(t.leechers),downloadCount:0,resolution:"",isBatch:false,isBestRelease:false,confirmed:false}));}private getTagContent(x:string,t:string):string{const r=new RegExp(`<${t}[^>]*>([^<]*)</${t}>`);const m=x.match(r);return m?m[1].trim():"";}private getNyaaTagContent(x:string,t:string):string{const r=new RegExp(`<nyaa:${t}[^>]*>([^<]*)</nyaa:${t}>`);const m=x.match(r);return m?m[1].trim():"";}private convertSizeToBytes(s:string):number{const m=s.match(/^([\d.]+)\s*([KMGT]iB)$/);if(!m)return 0;const[a,n,u]=m;const m={"KiB":1024,"MiB":1024*1024,"GiB":1024*1024*1024,"TiB":1024*1024*1024*1024};return Math.round(parseFloat(n)*m[u]);}}"
}
